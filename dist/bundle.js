"use strict";(self.webpackChunkto_do_list=self.webpackChunkto_do_list||[]).push([[296],{426:(n,e,t)=>{t.d(e,{Z:()=>f});var r=t(537),o=t.n(r),i=t(645),a=t.n(i),s=t(667),d=t.n(s),l=new URL(t(491),t.b),u=new URL(t(168),t.b),c=a()(o()),A=d()(l),m=d()(u);c.push([n.id,"@font-face {\n    font-family: arima;\n    src: url("+A+') format("woff2"),\n    url('+m+') format("woff");\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n:root {\n    --background: hsl(60, 30%, 96%);\n    --background-hover: hsl(60, 30%, 90%);\n    --background-active: hsl(60, 30%, 87%);\n    --start-screen-bg: hsla(225, 27%, 51%, 0.973);\n    --subtle: hsl(225, 27%, 51%);\n    --more-subtle: hsl(225, 27%, 85%);\n    --pink: hsl(326, 100%, 74%);\n    --dark-pink: hsl(326, 50%, 50%);\n    --green: hsl(135, 94%, 65%);\n    --dark-green: hsl(135, 50%, 50%);\n    --yellow: hsl(65, 92%, 76%);\n    --dark-yellow: hsl(65, 50%, 50%);\n    --blue: hsl(191, 97%, 77%);\n    --font:  hsl(231, 15%, 18%);\n}\n\nbody {\n    font-family: arima, \'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;\n    background-color: var(--background);\n    display: grid;\n    grid-template: 1fr 6fr / 1fr 4fr;\n    height: 100vh;\n    position: relative;\n}\n\n.sidebar-title {\n    grid-area: 1 / 1 / 2 / 2;\n    display: flex;\n    padding: 16px 0px 0px 20px;\n    color: var(--font);\n}\n\n.sidebar {\n    color: var(--font);\n    min-width: 125px;\n}\n\n.sidebar {\n    padding: 6px;\n    grid-area: 2 / 1 / -1 / 2;\n\n}\n\n.header {\n    background-color: var(--subtle);\n    grid-area: 1 / 2 / 2 / -1;\n    border-bottom-left-radius: 75px 50px;\n    color: var(--font);\n}\n\n.time-cats {\n    display: flex;\n    flex-direction: column;\n}\n\n.cat {\n    background-color: var(--background);\n    border-bottom: 1px solid var(--more-subtle);\n    display: flex;\n    justify-content: flex-end;\n    padding: 13px 5px 0px 5px;\n    border-radius: 20px 20px 10px 10px;\n    margin-bottom: -5px;\n    box-shadow: 0px 1px 1px var(--more-subtle);\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-top: 21px;\n}\n\n.user-projects .project {\n    border-bottom: 1px solid var(--more-subtle);\n    display: flex;\n    justify-content: flex-end;\n    padding: 5px;\n    border-radius: 10px;\n    box-shadow: 0px 1px 1px var(--more-subtle);\n}\n\n.user-projects .project.low {\n    border-left: 8px solid var(--dark-green);\n}\n\n.user-projects .project.medium {\n    border-left: 8px solid var(--dark-yellow);\n}\n\n.user-projects .project.high {\n    border-left: 8px solid var(--dark-pink);\n}\n\n.cat:first-child {\n    z-index: 4;\n}\n.cat:nth-child(2) {\n    z-index: 3;\n}\n\n.cat:nth-child(3) {\n    z-index: 2;\n}\n\n.cat:nth-child(4) {\n    z-index: 1;\n}\n\n.cat:hover,\n.project:hover {\n    background-color: var(--more-subtle);\n    cursor: pointer;\n}\n\n.cat:active,\n.project:active {\n    background-color: var(--background-active);\n}\n\n.projects {\n    margin-top: 16px;\n}\n\n.meat {\n    display: flex;\n    padding: 30px;\n    flex-wrap: wrap;\n    gap: 16px;\n}\n.main {\n    min-width: 300px;\n    flex: 3 1 auto;\n}\n\n.details-box {\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    border: 1px solid var(--subtle);\n    padding: 8px;\n} \n\n.detail-title {\n    font-size: 1.2rem;\n    border-bottom: 1px solid var(--more-subtle);\n\n}\n\n.project-notes {\n    max-width: 300px;\n}\n\n.delete-button {\n    justify-self: flex-end;\n    align-self: flex-end;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: 1.1rem;\n    box-sizing: border-box;\n    appearance: none;\n    border: none;\n    height: 2rem;\n    max-width: 32px;\n    padding: 8px 8px;\n    background-color: var(--more-subtle);\n    border-radius: 10px;\n    transition: max-width 0.3s ease-out;\n}\n\n.delete-button-text {\n    overflow: hidden;\n    max-height: 2rem;\n}\n\n.delete-button:hover {\n    max-width: 150px;\n}\n\n.add-item {\n    appearance: none;\n    border: none;\n    font-family: inherit;\n    background-color: var(--background);\n    font-size: 1.2rem;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    padding: 6px 30px;\n    background-color: var(--more-subtle);\n    border-radius: 15px;\n    width: 100px;\n    margin-top: 10px;\n}\n\n.add-item:hover {\n    background-color: var(--subtle);\n}\n\n.add-item:active {\n    background-color: var(--more-subtle);\n}\n.add-item > span {\n    position: absolute;\n    right: 15%;\n    bottom: 15%;\n}\n\n.add-form {\n    font-family: inherit;\n    z-index: 10;\n    visibility: hidden;\n    scale: 0;\n    padding: 10px 30px 30px 30px;\n    background-color: var(--subtle);\n    width: min-content;\n    height: min-content;\n    position: absolute;\n    inset: 0;\n    margin: auto;\n    border-radius: 30px;\n    box-shadow: 1px 1px 3px var(--subtle);\n    color: var(--background);\n    transition: 0.3s;\n}\n\n.form-type {\n    text-align: center;\n    padding: 0;\n    margin: 0;\n}\n\n.add-form .form-contents {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.add-form input,\n.add-form textarea {\n    appearance: none;\n    border: none;\n    font-size: 1.1rem;\n    font-family: inherit;\n    padding: 8px;\n    border-radius: 10px;\n    line-height: 24px;\n    width: 200px;\n    background-color: var(--background);\n}\n\n.add-form input:focus,\n.add-form textarea:focus {\n    outline: none;\n}\n\n.add-form .radio {\n    display: flex;\n    border: none;\n    width: 200px;\n}\n\n.radio input[type="radio"] {\n    width: 20px;\n    height: 20px;\n    background-color: var(--more-subtle);\n    position: relative;\n    cursor: pointer;\n}\n\n.radio input[type="radio"]::after {\n    position: absolute;\n    content: " ";\n    width: 18px;\n    height: 18px;\n    background-color: var(--pink);\n    border-radius: 50%;\n    left: 1px;\n    bottom: 1px;\n    visibility: hidden;\n    transform: scale(0);\n    transition: .4s;\n}\n\n.radio input[type="radio"]:checked::after {\n    visibility: visible;\n    transform: scale(1);\n}\n\n.radio input#low::after {\n    background-color: var(--green);\n}\n\n.radio input#medium::after {\n    background-color: var(--yellow);\n}\n\n.radio input #high::after {\n    background-color: var(--pink);\n}\n\n.radio ul {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n}\n.radio li {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.radio li:first-child {\n    color: var(--green);\n}\n\n.radio li:nth-child(2) {\n    color: var(--yellow);\n}\n\n.radio li:nth-child(3) {\n    color: var(--pink);\n}\n\n.btns {\n    display: flex;\n    width: 200px;\n    justify-content: space-around;\n    margin-top: 16px;\n}\n\n.add-form button {\n    appearance: none;\n    border: none;\n    font-family: inherit;\n    font-size: 1rem;\n    padding: 8px 16px;\n    border-radius: 10px;\n    background-color: var(--background);\n    cursor: pointer;\n}\n\n.add-form button:hover {\n    background-color: var(--more-subtle);\n}\n\n.add-form button:active {\n    background-color: var(--background-active);\n}\n\n.hidden {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.2s ease-out;\n}\n\n.add-form button.info {\n    position: absolute;\n    box-sizing: border-box;\n    font-size: 1.5rem;\n    color: var(--font);\n    height: min-content;\n    width: min-content;\n    padding: 0;\n    line-height: 1.2rem;\n    text-align: center;\n    background-color: hsla(225, 27%, 51%, 0);\n    top: 0;\n    right: -10px;\n}\n\n.add-form button.info:hover {\n    color: var(--more-subtle);\n}\n\n.add-form button.info:active {\n    color: var(--background-active);\n}\n\n.visible {\n    visibility: visible;\n    scale: 1;\n}\n\n.list-item {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    cursor: pointer;\n    border-bottom: 1px solid var(--more-subtle);\n    font-size: 1.2rem;\n    color: var(--font);\n}\n\n.list-item input,\n.list-item label {\n    cursor: pointer;\n}\n\n\n.list-item input[type="checkbox"] {\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border: 1px solid var(--subtle);\n    border-radius: 50%;\n    position: relative;\n}\n\n.list-item input[type="checkbox"]::before {\n    content: \'\';\n    position: absolute;\n    background-color: var(--subtle);\n    width: 16px;\n    height: 16px;\n    border-radius: 50%;\n    visibility: hidden;\n    transform: scale(0);\n    transition: 0.1s;\n    top: 1px;\n    left: 1px;\n}\n\n.list-item input[type="checkbox"]:checked::before {\n    visibility: visible;\n    transform: scale(1);\n}\n\n.list-item input[type="checkbox"]:checked + label {\n    text-decoration: line-through var(--more-subtle);\n    color: var(--more-subtle);\n}\n\n.item-info-button {\n    cursor: pointer;\n    position: relative;\n    appearance: none;\n    border: none;\n    background-color: var(--background);\n    font-size: 1.2rem;\n    color: var(--subtle);\n    margin-left: auto;\n    visibility: hidden;\n}\n\n.list-item:hover .item-info-button {\n    visibility: visible;\n}\n\n.item-details {\n    font-family: arima;\n    position: absolute;\n    z-index: 10;\n    background-color: var(--more-subtle);\n    border: none;\n    width: 200px;\n    left: -200px;\n    border-radius: 20px;\n    box-shadow: 1px -1px 3px darkgray;\n}\n\n.detail-title {\n    font-size: 1.2rem;\n    color: var(--font);\n    border-bottom: 0.5px dotted var(--font);\n\n}\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@font-face {\n    font-family: arima;\n    src: url("./fonts/Arima-Thin.woff2") format("woff2"),\n    url("./fonts/Arima-Thin.woff") format("woff");\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n:root {\n    --background: hsl(60, 30%, 96%);\n    --background-hover: hsl(60, 30%, 90%);\n    --background-active: hsl(60, 30%, 87%);\n    --start-screen-bg: hsla(225, 27%, 51%, 0.973);\n    --subtle: hsl(225, 27%, 51%);\n    --more-subtle: hsl(225, 27%, 85%);\n    --pink: hsl(326, 100%, 74%);\n    --dark-pink: hsl(326, 50%, 50%);\n    --green: hsl(135, 94%, 65%);\n    --dark-green: hsl(135, 50%, 50%);\n    --yellow: hsl(65, 92%, 76%);\n    --dark-yellow: hsl(65, 50%, 50%);\n    --blue: hsl(191, 97%, 77%);\n    --font:  hsl(231, 15%, 18%);\n}\n\nbody {\n    font-family: arima, \'Gill Sans\', \'Gill Sans MT\', Calibri, \'Trebuchet MS\', sans-serif;\n    background-color: var(--background);\n    display: grid;\n    grid-template: 1fr 6fr / 1fr 4fr;\n    height: 100vh;\n    position: relative;\n}\n\n.sidebar-title {\n    grid-area: 1 / 1 / 2 / 2;\n    display: flex;\n    padding: 16px 0px 0px 20px;\n    color: var(--font);\n}\n\n.sidebar {\n    color: var(--font);\n    min-width: 125px;\n}\n\n.sidebar {\n    padding: 6px;\n    grid-area: 2 / 1 / -1 / 2;\n\n}\n\n.header {\n    background-color: var(--subtle);\n    grid-area: 1 / 2 / 2 / -1;\n    border-bottom-left-radius: 75px 50px;\n    color: var(--font);\n}\n\n.time-cats {\n    display: flex;\n    flex-direction: column;\n}\n\n.cat {\n    background-color: var(--background);\n    border-bottom: 1px solid var(--more-subtle);\n    display: flex;\n    justify-content: flex-end;\n    padding: 13px 5px 0px 5px;\n    border-radius: 20px 20px 10px 10px;\n    margin-bottom: -5px;\n    box-shadow: 0px 1px 1px var(--more-subtle);\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-top: 21px;\n}\n\n.user-projects .project {\n    border-bottom: 1px solid var(--more-subtle);\n    display: flex;\n    justify-content: flex-end;\n    padding: 5px;\n    border-radius: 10px;\n    box-shadow: 0px 1px 1px var(--more-subtle);\n}\n\n.user-projects .project.low {\n    border-left: 8px solid var(--dark-green);\n}\n\n.user-projects .project.medium {\n    border-left: 8px solid var(--dark-yellow);\n}\n\n.user-projects .project.high {\n    border-left: 8px solid var(--dark-pink);\n}\n\n.cat:first-child {\n    z-index: 4;\n}\n.cat:nth-child(2) {\n    z-index: 3;\n}\n\n.cat:nth-child(3) {\n    z-index: 2;\n}\n\n.cat:nth-child(4) {\n    z-index: 1;\n}\n\n.cat:hover,\n.project:hover {\n    background-color: var(--more-subtle);\n    cursor: pointer;\n}\n\n.cat:active,\n.project:active {\n    background-color: var(--background-active);\n}\n\n.projects {\n    margin-top: 16px;\n}\n\n.meat {\n    display: flex;\n    padding: 30px;\n    flex-wrap: wrap;\n    gap: 16px;\n}\n.main {\n    min-width: 300px;\n    flex: 3 1 auto;\n}\n\n.details-box {\n    flex: 1 1 auto;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    border: 1px solid var(--subtle);\n    padding: 8px;\n} \n\n.detail-title {\n    font-size: 1.2rem;\n    border-bottom: 1px solid var(--more-subtle);\n\n}\n\n.project-notes {\n    max-width: 300px;\n}\n\n.delete-button {\n    justify-self: flex-end;\n    align-self: flex-end;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: 1.1rem;\n    box-sizing: border-box;\n    appearance: none;\n    border: none;\n    height: 2rem;\n    max-width: 32px;\n    padding: 8px 8px;\n    background-color: var(--more-subtle);\n    border-radius: 10px;\n    transition: max-width 0.3s ease-out;\n}\n\n.delete-button-text {\n    overflow: hidden;\n    max-height: 2rem;\n}\n\n.delete-button:hover {\n    max-width: 150px;\n}\n\n.add-item {\n    appearance: none;\n    border: none;\n    font-family: inherit;\n    background-color: var(--background);\n    font-size: 1.2rem;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    padding: 6px 30px;\n    background-color: var(--more-subtle);\n    border-radius: 15px;\n    width: 100px;\n    margin-top: 10px;\n}\n\n.add-item:hover {\n    background-color: var(--subtle);\n}\n\n.add-item:active {\n    background-color: var(--more-subtle);\n}\n.add-item > span {\n    position: absolute;\n    right: 15%;\n    bottom: 15%;\n}\n\n.add-form {\n    font-family: inherit;\n    z-index: 10;\n    visibility: hidden;\n    scale: 0;\n    padding: 10px 30px 30px 30px;\n    background-color: var(--subtle);\n    width: min-content;\n    height: min-content;\n    position: absolute;\n    inset: 0;\n    margin: auto;\n    border-radius: 30px;\n    box-shadow: 1px 1px 3px var(--subtle);\n    color: var(--background);\n    transition: 0.3s;\n}\n\n.form-type {\n    text-align: center;\n    padding: 0;\n    margin: 0;\n}\n\n.add-form .form-contents {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.add-form input,\n.add-form textarea {\n    appearance: none;\n    border: none;\n    font-size: 1.1rem;\n    font-family: inherit;\n    padding: 8px;\n    border-radius: 10px;\n    line-height: 24px;\n    width: 200px;\n    background-color: var(--background);\n}\n\n.add-form input:focus,\n.add-form textarea:focus {\n    outline: none;\n}\n\n.add-form .radio {\n    display: flex;\n    border: none;\n    width: 200px;\n}\n\n.radio input[type="radio"] {\n    width: 20px;\n    height: 20px;\n    background-color: var(--more-subtle);\n    position: relative;\n    cursor: pointer;\n}\n\n.radio input[type="radio"]::after {\n    position: absolute;\n    content: " ";\n    width: 18px;\n    height: 18px;\n    background-color: var(--pink);\n    border-radius: 50%;\n    left: 1px;\n    bottom: 1px;\n    visibility: hidden;\n    transform: scale(0);\n    transition: .4s;\n}\n\n.radio input[type="radio"]:checked::after {\n    visibility: visible;\n    transform: scale(1);\n}\n\n.radio input#low::after {\n    background-color: var(--green);\n}\n\n.radio input#medium::after {\n    background-color: var(--yellow);\n}\n\n.radio input #high::after {\n    background-color: var(--pink);\n}\n\n.radio ul {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n}\n.radio li {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.radio li:first-child {\n    color: var(--green);\n}\n\n.radio li:nth-child(2) {\n    color: var(--yellow);\n}\n\n.radio li:nth-child(3) {\n    color: var(--pink);\n}\n\n.btns {\n    display: flex;\n    width: 200px;\n    justify-content: space-around;\n    margin-top: 16px;\n}\n\n.add-form button {\n    appearance: none;\n    border: none;\n    font-family: inherit;\n    font-size: 1rem;\n    padding: 8px 16px;\n    border-radius: 10px;\n    background-color: var(--background);\n    cursor: pointer;\n}\n\n.add-form button:hover {\n    background-color: var(--more-subtle);\n}\n\n.add-form button:active {\n    background-color: var(--background-active);\n}\n\n.hidden {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.2s ease-out;\n}\n\n.add-form button.info {\n    position: absolute;\n    box-sizing: border-box;\n    font-size: 1.5rem;\n    color: var(--font);\n    height: min-content;\n    width: min-content;\n    padding: 0;\n    line-height: 1.2rem;\n    text-align: center;\n    background-color: hsla(225, 27%, 51%, 0);\n    top: 0;\n    right: -10px;\n}\n\n.add-form button.info:hover {\n    color: var(--more-subtle);\n}\n\n.add-form button.info:active {\n    color: var(--background-active);\n}\n\n.visible {\n    visibility: visible;\n    scale: 1;\n}\n\n.list-item {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    cursor: pointer;\n    border-bottom: 1px solid var(--more-subtle);\n    font-size: 1.2rem;\n    color: var(--font);\n}\n\n.list-item input,\n.list-item label {\n    cursor: pointer;\n}\n\n\n.list-item input[type="checkbox"] {\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border: 1px solid var(--subtle);\n    border-radius: 50%;\n    position: relative;\n}\n\n.list-item input[type="checkbox"]::before {\n    content: \'\';\n    position: absolute;\n    background-color: var(--subtle);\n    width: 16px;\n    height: 16px;\n    border-radius: 50%;\n    visibility: hidden;\n    transform: scale(0);\n    transition: 0.1s;\n    top: 1px;\n    left: 1px;\n}\n\n.list-item input[type="checkbox"]:checked::before {\n    visibility: visible;\n    transform: scale(1);\n}\n\n.list-item input[type="checkbox"]:checked + label {\n    text-decoration: line-through var(--more-subtle);\n    color: var(--more-subtle);\n}\n\n.item-info-button {\n    cursor: pointer;\n    position: relative;\n    appearance: none;\n    border: none;\n    background-color: var(--background);\n    font-size: 1.2rem;\n    color: var(--subtle);\n    margin-left: auto;\n    visibility: hidden;\n}\n\n.list-item:hover .item-info-button {\n    visibility: visible;\n}\n\n.item-details {\n    font-family: arima;\n    position: absolute;\n    z-index: 10;\n    background-color: var(--more-subtle);\n    border: none;\n    width: 200px;\n    left: -200px;\n    border-radius: 20px;\n    box-shadow: 1px -1px 3px darkgray;\n}\n\n.detail-title {\n    font-size: 1.2rem;\n    color: var(--font);\n    border-bottom: 0.5px dotted var(--font);\n\n}\n\n'],sourceRoot:""}]);const f=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var d=n[s],l=r.base?d[0]+r.base:d[0],u=i[l]||0,c="".concat(l," ").concat(u);i[l]=u+1;var A=t(c),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var f=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:f,references:1})}a.push(c)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var d=r(n,o),l=0;l<i.length;l++){var u=t(i[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=d}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},776:(n,e,t)=>{var r=t(379),o=t.n(r),i=t(795),a=t.n(i),s=t(569),d=t.n(s),l=t(565),u=t.n(l),c=t(216),A=t.n(c),m=t(589),f=t.n(m),p=t(426),h={};function g(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function b(n){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},b(n)}function C(n){g(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===b(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(){return function(n){g(1,arguments);var e=C(n);return e.setHours(0,0,0,0),e}(Date.now())}function B(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function x(n,e){g(2,arguments);var t=C(n),r=B(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function y(n,e){g(2,arguments);var t=C(n),r=B(e);if(isNaN(r))return new Date(NaN);if(!r)return t;var o=t.getDate(),i=new Date(t.getTime());i.setMonth(t.getMonth()+r+1,0);var a=i.getDate();return o>=a?i:(t.setFullYear(i.getFullYear(),i.getMonth(),o),t)}function I(n){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},I(n)}function w(n,e){if(g(2,arguments),!e||"object"!==I(e))return new Date(NaN);var t=e.years?B(e.years):0,r=e.months?B(e.months):0,o=e.weeks?B(e.weeks):0,i=e.days?B(e.days):0,a=e.hours?B(e.hours):0,s=e.minutes?B(e.minutes):0,d=e.seconds?B(e.seconds):0,l=C(n),u=r||t?y(l,r+12*t):l,c=i||o?x(u,i+7*o):u,A=s+60*a,m=d+60*A,f=1e3*m,p=new Date(c.getTime()+f);return p}h.styleTagTransform=f(),h.setAttributes=u(),h.insert=d().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=A(),o()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals,Math.pow(10,8);var k=36e5;function T(n,e){var t;g(1,arguments);var r=B(null!==(t=null==e?void 0:e.additionalDigits)&&void 0!==t?t:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var o,i=M(n);if(i.date){var a=Y(i.date,r);o=U(a.restDateString,a.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var s,d=o.getTime(),l=0;if(i.time&&(l=W(i.time),isNaN(l)))return new Date(NaN);if(!i.timezone){var u=new Date(d+l),c=new Date(0);return c.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),c.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),c}return s=L(i.timezone),isNaN(s)?new Date(NaN):new Date(d+l+s)}var E={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},S=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,j=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,D=/^([+-])(\d{2})(?::?(\d{2}))?$/;function M(n){var e,t={},r=n.split(E.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?e=r[0]:(t.date=r[0],e=r[1],E.timeZoneDelimiter.test(t.date)&&(t.date=n.split(E.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var o=E.timezone.exec(e);o?(t.time=e.replace(o[1],""),t.timezone=o[1]):t.time=e}return t}function Y(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?o:100*i,restDateString:n.slice((r[1]||r[2]).length)}}function U(n,e){if(null===e)return new Date(NaN);var t=n.match(S);if(!t)return new Date(NaN);var r=!!t[4],o=N(t[1]),i=N(t[2])-1,a=N(t[3]),s=N(t[4]),d=N(t[5])-1;if(r)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,d)?function(n,e,t){var r=new Date(0);r.setUTCFullYear(n,0,4);var o=7*(e-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(e,s,d):new Date(NaN);var l=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(z[e]||(q(n)?29:28))}(e,i,a)&&function(n,e){return e>=1&&e<=(q(n)?366:365)}(e,o)?(l.setUTCFullYear(e,i,Math.max(o,a)),l):new Date(NaN)}function N(n){return n?parseInt(n):1}function W(n){var e=n.match(j);if(!e)return NaN;var t=P(e[1]),r=P(e[2]),o=P(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,r,o)?t*k+6e4*r+1e3*o:NaN}function P(n){return n&&parseFloat(n.replace(",","."))||0}function L(n){if("Z"===n)return 0;var e=n.match(D);if(!e)return 0;var t="+"===e[1]?-1:1,r=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,o)?t*(r*k+6e4*o):NaN}var z=[31,null,31,30,31,30,31,31,30,31,30,31];function q(n){return n%400==0||n%4==0&&n%100!=0}let O={};const F={compileArray(){this.items=[];for(let n in O)if(O[n].items)for(let e of O[n].items)if(e.due){let n=e.due;this.end?n>=this.begin&&n<this.end&&(this.items.push(e),console.log(this.items)):n>=this.begin&&this.items.push(e)}}};function Z(n,e,t){let r=Object.create(F);return r.title=n,r.items=[],r.begin=e,r.end=t,r}let H=v(),Q=w(H,{days:1}),R=w(H,{weeks:1}),X=w(H,{weeks:2}),G=[Z("Today",H,Q),Z("This Week",Q,R),Z("Next Week",R,X),Z("Future",X)];const $={deleteProject(){for(let n of this.items)localStorage.removeItem(`item-${this.title}-${n.title}`);delete O[this.title],localStorage.removeItem(`project-${this.title}`)}};function J(n,e,t,r){let o=Object.create($);return o.title=n,o.notes=e,o.due=t?T(t):"",o.priority=r,o.items=[],O[o.title]=o,localStorage.setItem(`project-${o.title}`,JSON.stringify({title:n,notes:e,due:t,priority:r})),o}const _={addToProject(){O[this.project].items.push(this)},removeFromProject(){const n=O[this.project].items.indexOf(this);O[this.project].items.splice(n,1),localStorage.removeItem(`item-${this.project}-${this.title}`)}};function V(n,e,t,r,o){let i=Object.create(_);return i.title=n,i.notes=e,i.due=t?T(t):"",i.priority=r,i.project=o,localStorage.setItem(`item-${i.project}-${i.title}`,JSON.stringify(i)),i}function K(n){return K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},K(n)}function nn(n){return g(1,arguments),n instanceof Date||"object"===K(n)&&"[object Date]"===Object.prototype.toString.call(n)}function en(n){if(g(1,arguments),!nn(n)&&"number"!=typeof n)return!1;var e=C(n);return!isNaN(Number(e))}function tn(n,e){g(2,arguments);var t=C(n).getTime(),r=B(e);return new Date(t+r)}function rn(n,e){g(2,arguments);var t=B(e);return tn(n,-t)}var on=864e5;function an(n){g(1,arguments);var e=1,t=C(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function sn(n){g(1,arguments);var e=C(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=an(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var a=an(i);return e.getTime()>=o.getTime()?t+1:e.getTime()>=a.getTime()?t:t-1}function dn(n){g(1,arguments);var e=sn(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=an(t);return r}var ln=6048e5,un={};function cn(){return un}function An(n,e){var t,r,o,i,a,s,d,l;g(1,arguments);var u=cn(),c=B(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=C(n),m=A.getUTCDay(),f=(m<c?7:0)+m-c;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function mn(n,e){var t,r,o,i,a,s,d,l;g(1,arguments);var u=C(n),c=u.getUTCFullYear(),A=cn(),m=B(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(d=A.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(c+1,0,m),f.setUTCHours(0,0,0,0);var p=An(f,e),h=new Date(0);h.setUTCFullYear(c,0,m),h.setUTCHours(0,0,0,0);var b=An(h,e);return u.getTime()>=p.getTime()?c+1:u.getTime()>=b.getTime()?c:c-1}function fn(n,e){var t,r,o,i,a,s,d,l;g(1,arguments);var u=cn(),c=B(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1),A=mn(n,e),m=new Date(0);m.setUTCFullYear(A,0,c),m.setUTCHours(0,0,0,0);var f=An(m,e);return f}var pn=6048e5;function hn(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const gn=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return hn("yy"===e?r%100:r,e.length)},bn=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):hn(t+1,2)},Cn=function(n,e){return hn(n.getUTCDate(),e.length)},vn=function(n,e){return hn(n.getUTCHours()%12||12,e.length)},Bn=function(n,e){return hn(n.getUTCHours(),e.length)},xn=function(n,e){return hn(n.getUTCMinutes(),e.length)},yn=function(n,e){return hn(n.getUTCSeconds(),e.length)},In=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return hn(Math.floor(r*Math.pow(10,t-3)),e.length)};var wn={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return gn(n,e)},Y:function(n,e,t,r){var o=mn(n,r),i=o>0?o:1-o;return"YY"===e?hn(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):hn(i,e.length)},R:function(n,e){return hn(sn(n),e.length)},u:function(n,e){return hn(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return hn(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return hn(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return bn(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return hn(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){g(1,arguments);var t=C(n),r=An(t,e).getTime()-fn(t,e).getTime();return Math.round(r/pn)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):hn(o,e.length)},I:function(n,e,t){var r=function(n){g(1,arguments);var e=C(n),t=an(e).getTime()-dn(e).getTime();return Math.round(t/ln)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):hn(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):Cn(n,e)},D:function(n,e,t){var r=function(n){g(1,arguments);var e=C(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/on)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):hn(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return hn(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return hn(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return hn(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return vn(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):Bn(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):hn(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):hn(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):xn(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):yn(n,e)},S:function(n,e){return In(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Tn(o);case"XXXX":case"XX":return En(o);default:return En(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return Tn(o);case"xxxx":case"xx":return En(o);default:return En(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+kn(o,":");default:return"GMT"+En(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+kn(o,":");default:return"GMT"+En(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return hn(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return hn((r._originalDate||n).getTime(),e.length)}};function kn(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),i=r%60;if(0===i)return t+String(o);var a=e||"";return t+String(o)+a+hn(i,2)}function Tn(n,e){return n%60==0?(n>0?"-":"+")+hn(Math.abs(n)/60,2):En(n,e)}function En(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+hn(Math.floor(o/60),2)+t+hn(o%60,2)}const Sn=wn;var jn=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Dn=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const Mn={p:Dn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return jn(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",jn(o,e)).replace("{{time}}",Dn(i,e))}};function Yn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var Un=["D","DD"],Nn=["YY","YYYY"];function Wn(n){return-1!==Un.indexOf(n)}function Pn(n){return-1!==Nn.indexOf(n)}function Ln(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var zn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function qn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const On={date:qn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:qn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:qn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Fn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Zn(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,i=null!=t&&t.width?String(t.width):o;r=n.formattingValues[i]||n.formattingValues[o]}else{var a=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[s]||n.values[a]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const Hn={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Zn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Zn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:Zn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Zn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Zn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Qn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=e.match(o);if(!i)return null;var a,s=i[0],d=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(d)?Xn(d,(function(n){return n.test(s)})):Rn(d,(function(n){return n.test(s)}));a=n.valueCallback?n.valueCallback(l):l,a=t.valueCallback?t.valueCallback(a):a;var u=e.slice(s.length);return{value:a,rest:u}}}function Rn(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function Xn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var Gn,$n={ordinalNumber:(Gn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(Gn.matchPattern);if(!t)return null;var r=t[0],o=n.match(Gn.parsePattern);if(!o)return null;var i=Gn.valueCallback?Gn.valueCallback(o[0]):o[0];i=e.valueCallback?e.valueCallback(i):i;var a=n.slice(r.length);return{value:i,rest:a}}),era:Qn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Qn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Qn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Qn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Qn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Jn={code:"en-US",formatDistance:function(n,e,t){var r,o=zn[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:On,formatRelative:function(n,e,t,r){return Fn[n]},localize:Hn,match:$n,options:{weekStartsOn:0,firstWeekContainsDate:1}};var _n=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Vn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Kn=/^'([^]*?)'?$/,ne=/''/g,ee=/[a-zA-Z]/;function te(n,e,t){var r,o,i,a,s,d,l,u,c,A,m,f,p,h,b,v,x,y;g(2,arguments);var I=String(e),w=cn(),k=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:w.locale)&&void 0!==r?r:Jn,T=B(null!==(i=null!==(a=null!==(s=null!==(d=null==t?void 0:t.firstWeekContainsDate)&&void 0!==d?d:null==t||null===(l=t.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:w.firstWeekContainsDate)&&void 0!==a?a:null===(c=w.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=B(null!==(m=null!==(f=null!==(p=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(b=t.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==p?p:w.weekStartsOn)&&void 0!==f?f:null===(x=w.locale)||void 0===x||null===(y=x.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==m?m:0);if(!(E>=0&&E<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!k.localize)throw new RangeError("locale must contain localize property");if(!k.formatLong)throw new RangeError("locale must contain formatLong property");var S=C(n);if(!en(S))throw new RangeError("Invalid time value");var j=Yn(S),D=rn(S,j),M={firstWeekContainsDate:T,weekStartsOn:E,locale:k,_originalDate:S},Y=I.match(Vn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,Mn[e])(n,k.formatLong):n})).join("").match(_n).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return re(r);var i=Sn[o];if(i)return null!=t&&t.useAdditionalWeekYearTokens||!Pn(r)||Ln(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!Wn(r)||Ln(r,e,String(n)),i(D,r,k.localize,M);if(o.match(ee))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return Y}function re(n){var e=n.match(Kn);return e?e[1].replace(ne,"'"):n}const oe=document.querySelector(".time-cats"),ie=document.querySelector(".projects"),ae=document.querySelector(".main"),se=document.createElement("h1");se.classList.add("title-display");const de=document.createElement("div");de.classList.add("item-container");const le=document.querySelector(".project-details");let ue,ce=[],Ae=[];const me=document.createElement("button"),fe=document.createElement("span");function pe(){G[0].compileArray(),ve(G[0]).openList(),ue.type="time"}function he(){Ae=[],function(){const n=document.querySelector(".user-projects");n&&n.remove()}();const n=document.createElement("ul");n.classList.add("user-projects");for(let e in O){let t=Be(O[e]);Ae.push(t),console.log(t),n.appendChild(t.createTab())}ie.appendChild(n)}me.innerText="add",fe.classList.add("mdi","mdi-playlist-plus"),me.appendChild(fe),me.classList.add("add-item"),me.addEventListener("click",(()=>{qe("item")})),ae.append(se,de,me);const ge={openList(){we(),ue=this.list,se.innerText=this.list.title,this.list.items.length&&this.renderListItems()},renderListItems(){ce=[];for(let n=0;n<this.list.items.length;n++){let e=Ie(this.list.items[n]);ce.push(e),e.renderView()}}},be={createTab(){const n=document.createElement("li");return n.innerText=`${this.list.title}`,n.classList.add("project"),this.list.priority&&n.classList.add(`${this.list.priority}`),n.addEventListener("click",(()=>{this.openList();const n=this.createDetailsBox(),e=this.makeDeleteButton();n.appendChild(e),le.appendChild(n),ue.type="project"})),n}},Ce=n=>({createDetailsBox(){var e=document.createElement("div");if(n.due|n.notes|n.priority&&e.classList.add("details-box"),n.due){const t=document.createElement("div"),r=document.createElement("div");r.classList.add("detail-title"),r.innerText="Due";const o=document.createElement("div");console.log(n.due);let i=te(n.due,"PPPP");o.innerText=i,t.append(r,o),e.appendChild(t)}if(n.notes){const t=document.createElement("div"),r=document.createElement("div");r.classList.add("detail-title"),r.innerText="Notes";const o=document.createElement("div");o.classList.add("project-notes"),o.innerText=n.notes,t.append(r,o),e.appendChild(t)}if(n.priority){const t=document.createElement("div"),r=document.createElement("div");r.classList.add("detail-title"),r.innerText="Priority";const o=document.createElement("div");o.innerText=n.priority,t.append(r,o),e.appendChild(t)}return e}});function ve(n){const e=Object.create(ge);return e.list=n,e}function Be(n){let e=Object.assign(ge,be),t=Object.create(e);var r;return t=Object.assign(t,Ce(n),(r=n,{makeDeleteButton(){const n=document.createElement("button");n.classList.add("mdi","mdi-delete-circle-outline"),n.classList.add("delete-button");const e=document.createElement("div");return e.classList.add("delete-button-text"),e.innerText="Delete List",n.appendChild(e),n.addEventListener("click",(()=>{r.deleteProject(),he(),pe()})),n}})),t.list=n,t}function xe(n){const e=Ie(n);ce.push(e),e.renderView()}const ye={deleteItem(){this.item.removeFromProject()},renderView(){const n=document.createElement("li");n.classList.add("list-item"),n.append(this.checkbox,this.itemText);const e=document.createElement("button");if(e.classList.add("item-info-button","mdi","mdi-information-outline"),e.addEventListener("click",(()=>{if(e.firstChild)e.removeChild(e.firstChild);else{const n=this.createDetailsBox();if(n.classList.add("item-details"),"time"===ue.type){const e=document.createElement("div"),t=document.createElement("div");t.classList.add("detail-title"),t.innerText="Project";const r=document.createElement("div");r.innerText=this.item.project,e.append(t,r),n.appendChild(e)}if(!n.firstChild){let e=document.createElement("div");e.innerText="No information available",n.appendChild(e)}e.appendChild(n)}})),e.addEventListener("mouseleave",(()=>{e.firstChild&&e.removeChild(e.firstChild)})),n.appendChild(e),de.firstChild)de.firstChild.appendChild(n);else{const e=document.createElement("ul");e.appendChild(n),de.appendChild(e)}}};function Ie(n){let e=Object.create(ye);const t=`item-${n.title}`,r=document.createElement("label");r.setAttribute("for",t),r.innerText=n.title;const o=document.createElement("input");return o.setAttribute("type","checkbox"),o.setAttribute("id",t),e.item=n,e.checkbox=o,e.itemText=r,e=Object.assign(e,Ce(n)),e}function we(){if(le.firstChild&&le.removeChild(le.firstChild),de.firstChild){for(let n of ce)n.checkbox.checked&&n.deleteItem();de.removeChild(de.firstChild)}}const ke=document.querySelector(".add-form"),Te=document.querySelector("button.info"),Ee=document.querySelector(".hidden"),Se=document.querySelector(".submitBtn"),je=document.querySelector(".cancel"),De=document.querySelector("#title"),Me=document.querySelector(".form-type"),Ye=document.querySelector(".input-title");let Ue="";const Ne=document.createElement("input");Ne.setAttribute("id","item-project");const We=document.createElement("label");We.setAttribute("for","item-project"),We.innerText="Project";const Pe=document.createElement("div");Pe.append(We,Ne);const Le={title:document.querySelector("#title"),notes:document.querySelector("#notes"),due:document.querySelector("#due")};function ze(){const n=Le.title.value,e=Le.notes.value;let t,r=Le.due.value;return r&&(r=Le.due.value),t=document.querySelector("input[name='priority']:checked")?document.querySelector("input[name='priority']:checked").value:"",[n,e,r,t]}function qe(n){Pe.remove(),Le.due.removeAttribute("disabled"),Le.due.removeAttribute("min"),Le.due.removeAttribute("max"),Le.due.removeAttribute("value"),"New Project"===n?Ue="project":"time"===ue.type?(Ue="time","Today"===ue.title?(Le.due.setAttribute("value",Oe),Le.due.setAttribute("disabled",!0)):"This Week"===ue.title?(Le.due.setAttribute("value",Fe),Le.due.setAttribute("min",Fe),Le.due.setAttribute("max",Ze)):"Next Week"===ue.title?(Le.due.setAttribute("value",Ze),Le.due.setAttribute("min",Ze),Le.due.setAttribute("max",He)):"Future"===ue.title&&(Le.due.setAttribute("value",He),Le.due.setAttribute("min",He)),Ye.insertAdjacentElement("afterend",Pe)):"item"===n&&(Ue="item"),Me.innerText=n,ke.classList.add("visible")}let Oe=v(),Fe=w(Oe,{days:1}),Ze=w(Oe,{weeks:1}),He=w(Oe,{weeks:2});function Qe(){ke.classList.remove("visible")}Oe=te(Oe,"yyyy-MM-dd"),Fe=te(Fe,"yyyy-MM-dd"),Ze=te(Ze,"yyyy-MM-dd"),He=te(He,"yyyy-MM-dd"),Te.addEventListener("click",(()=>{Ee.style.maxHeight?(Ee.style.maxHeight=null,Te.classList.remove("mdi-information-off-outline"),Te.classList.add("mdi-information-outline")):(Ee.style.maxHeight=Ee.scrollHeight+"px",Te.classList.remove("mdi-information-outline"),Te.classList.add("mdi-information-off-outline"))})),Se.addEventListener("click",(()=>{let n=ze();if("project"===Ue)J(...n),he(),function(){const n=Ae[Ae.length-1];n.openList();const e=n.createDetailsBox(),t=n.makeDeleteButton();e.appendChild(t),le.appendChild(e)}();else if("item"===Ue){const e=ue.title,t=V(...n,e);t.addToProject(),xe(t)}else if("time"===Ue){let e=Ne.value;e||(e="Strays"),O[e]||J(e);const t=V(...n,e);t.addToProject(),xe(t),he()}ke.reset(),Qe()})),je.addEventListener("click",(()=>{ke.reset(),Qe()})),De.addEventListener("keypress",(n=>{13===n.keyCode&&n.preventDefault()}));const Re=document.querySelector(".new-project");localStorage.length&&(function(){let n=[];for(let e in localStorage){if(console.log(e),!e.startsWith("project")&&!e.startsWith("item"))continue;let t=localStorage.getItem(e);if(t=JSON.parse(t),e.startsWith("project"))J(t.title,t.notes,t.due,t.priority);else if(e.startsWith("item")){let e=V(t.title,t.notes,t.due,t.priority,t.project);n.push(e)}}for(let e of n)e.addToProject()}(),he()),pe(),function(){for(let n of G){let e=document.createElement("li");e.classList.add("cat"),e.innerText=n.title,e.addEventListener("click",(()=>{we(),n.compileArray(),ve(n).openList(),ue.type="time"})),oe.appendChild(e)}}(),Re.addEventListener("click",(()=>{qe("New Project")}))},168:(n,e,t)=>{n.exports=t.p+"e6c0143fde0bc6e29c63.woff"},491:(n,e,t)=>{n.exports=t.p+"a9832f1d8716c10177d7.woff2"}},n=>{n(n.s=776)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,